[{"id":0,"href":"/vscode-bazel-tutorial/contributing/","title":"Contributing","parent":"Visual Studio Code - Bazel Workspace","content":" Understanding the Layout api - This is where the protocol buffer files are located. conf - These are configuration files used by Bazel. docs - a Hugo website (WIP). golang - The Go Project implementing the generated APIs. java - The Java Project implementing the generated APIS. third_party - A best practice directory for storing third_party assets. tools - Helper scripts for VSCode to utilize Go with Bazel. Important Files vscode-bazel-tutorial.code-workspace - responsible for configuring vscode. WORKSPACE - responsible for dependency management in Bazel. api/BUILD - the build file for the API model and GRPC. golang/BUILD - the Go build file with dependencies on the API. java/BUILD - the Java build file with dependencies on the API. SDLC SDLC Steps Ensure you have a GitHub account. Request access if the repository is private. Fork the repository. This makes a copy to your local GitHub account. Clone the newly created fork to your developer machine. git clone \u0026lt;repository name\u0026gt; Make any changes or additions to the code. Write automated test cases. Verify all tests are passing and all code is commented and meets the style guide requirements. _ bazel test //... runs all tests _ bazel coverage //java/... runs test coverage on a specific target. Commit your code, and push back to your fork. git commit add . git commit -a Add comments, if you are referencing a feature or bug, please indicate the number first. git push Verify the build runs in GitHub actions on your own branch. This is important, especially if you are updating BUILD or WORKSPACE files. From the GitHub interface, create a pull request and ensure you comment the reasons and thought processes behind the change or additions. * Understanding Pull Requests Once created, you will collaborate with the mantainers for QA purposes, unless they simply accept the changed and merge it. If not, you may be asked to make some changes and create a new PR. Licensing All content on this site is licened under the Apache 2.0 license. Please see the LICENSE file in the source code. If you contribute to the project, please add your name to the contributors file and link to your GitHub profile.\n"},{"id":1,"href":"/vscode-bazel-tutorial/contributing/contributors/","title":"Contributors","parent":"Contributing","content":" Thank you No Open Source Software (OSS) stands alone. The following contributuors have made material contributions to this project and their work is sincerly appreciated.\nName Start Date Bio Ryan McGuinness 09 Sept 22 Git Hub "},{"id":2,"href":"/vscode-bazel-tutorial/legal-notice/","title":"Legal Notice \u0026 Privacy","parent":"Visual Studio Code - Bazel Workspace","content":" Collection of general data and information The website github.com MAY collect a series of general data and information when a data subject or automated system calls up the website. This general data and information are stored in the github.com server log files. Collected may be:\nthe browser types and versions used the operating system used by the accessing system the website from which an accessing system reaches our website (so-called referrers) the sub-websites the date and time of access to the Internet site an Internet protocol address (IP address) the Internet service provider of the accessing system any other similar data and information that may be used in the event of attacks on our information technology systems When using these general data and information, we do not draw any conclusions about the data subject. Rather, this information is needed to deliver the content of our website correctly and answer your request (Article 6.1b GDPR).\nYour IP address and the requested URL can be stored in accordance to the GitHub policies to analyze possible problems with the web page. They will be deleted as soon as it is confirmed that they can no further help with diagnosing the problem or the problem is solved. (Article 6.1f GDPR).\nCookies This web page does not use any cookies.\n"},{"id":3,"href":"/vscode-bazel-tutorial/build/details/","title":"The Build in Detail","parent":"The Build","content":" What happend When you ran bazel build //..., bazel read the .bazelrc file in this directory. .bazelrc instructed bazel to download all of the dependencies to the build directory under projects. The dependency cache is placed here so we can reference our GoLang, Java, Protobuf, and Downloaded dependencies using relative paths. Bazel then reads the WORKSPACE, and each recursive BUILD file to create a set of dependencies, this includes all of the binaries for Java, Go, etc. You either had the right directory, or you made some changes and edited the workspace. This is how the Java and Go environments are setup, so it\u0026rsquo;s pretty important. Again, with the workspace limitations, Java Projects MAY NOT have multiple Java dependencies, this ONLY impacts the IDEs ability to do auto complete, but DOES NOT represent the compile or runtime dependencies. This MAY cause problems. Build Details Just so you know what\u0026rsquo;s happening behind the scenes when we execute bazel build //.... From above, we have a rough understanding, this section will provide a little more detail, starting from the WORKSPACE.\nAs bazel reads the workspace, it determines which languages and features will be supported. From top to bottom: Protocol Buffers The Protol Buffer Tool Chain (Protoc) GRPC GRPC Documentation Generator Go Toolchain (version 1.19.1) Gazelle (A build and dependency helper for bazel) Go GRPC rules. The Java Tool Chain (Java 17) The internal Maven Tool Chain The project Maven Dependencies Hugo Site Generation Tools A Hug Theme (GeekDoc) Onces those tool chains have been loaded, each directory BUILD file is read, and a dependency graph is created. That dependency graph determines the build order. API - Is built first because Java and Go depend on it, it uses the GRPC toolchain. Java - Is built, using the Java Toolchain, maven dependencies, and the protocol definitions. The output of the generated files are in the \u0026lsquo;build\u0026rsquo; directory. Go - Is built, using the Go Tool Chain, and the dependencies from the Gazelle (go_deps.bzl) file. The docs directory is built using the Hugo toolchain and theme. "},{"id":4,"href":"/vscode-bazel-tutorial/setup/","title":"Setting up the Workspace","parent":"Visual Studio Code - Bazel Workspace","content":" Introduction In your home directory, create a folder called \u0026ldquo;projects\u0026rdquo;. This only matters due to some limitations in the workspace configuration file. Vscode extensions for Java and Go WILL NOT support variable expressions for paths.\nLimitations This project is currently setup in \u0026ldquo;/opt/projects\u0026rdquo;. Why /opt? Because writing a turorial to create a \u0026lsquo;/data/projects\u0026rsquo; directory on MacOS seems to be a hit-and-miss since / is a read-only mount, and /etc/synthetic.conf has other issues. Steps # Create a projects directory, this example creates it on the /opt file system # This IS NOT recommended, but is done so for the sake of a conistant development environment. # Please feel free to put this any path you have access, but you need to remember for a couple of changes. sudo mkdir /opt/projects cd /opt/projects # Clone the repository git clone https://github.com/rrmcguinness/vscode-bazel-tutorial # Run Bazel once before starting bazel build //... # Open Visual Studio Code # If you changed the download location: code . # If you didn\u0026#39;t change the download location: code vscode-bazel-tutorial.code-workspace Edit the workspace (IF YOU CHANGED THE DOWNLOAD LOCATION) Once Visual Studio Code has opened, edit the vscode-bazel-tutorial.code-workspace file.\nChange all occurances of \u0026ldquo;/opt/projects\u0026rdquo; to your download directoy. DO NOT attempt to use variables or relative links, they ARE NOT honored by the extensions.\nLastly, in the java.configuration.runtimes, if you ARE NOT using Apple OS X, then please change _macos with _linux or _windows accordingly.\nAgain, this is because a relative path, and command variable expansion IS NOT supported by the workpace file. Otherwise ${command:os_type} would work.\nOnce that change has been made, you may either \u0026ldquo;open workspace from file\u0026rdquo;, or close and reopen from the terminal with the last command above.\nStart the Java Workspace Navigate to java \u0026gt; src \u0026gt; service \u0026gt; CustomerService.java and open it.\nWhen you open this file, it will start the Java Language Server, this will in-turn read the workspace file to determine where to find Java, and which dependencies to add to the classpath. ** More about that below.\n"},{"id":5,"href":"/vscode-bazel-tutorial/build/","title":"The Build","parent":"Visual Studio Code - Bazel Workspace","content":" Visual Studio Code Using the command pallet, you may execute the build tasks specified in the \u0026rsquo;tasks\u0026rsquo; section of the build file. These are IDE extension to the Command Line Arguments.\nApple OSX - cmd + opt + p Windows - ctrl + shift + p Linux - ctrl + shift + p Open the command pallet Type: Tasks: Run Tasks (This will autocomplete) Select Desired Target Don\u0026rsquo;t Monitor Output Available Tasks:\nGeneral Build All Test All API Build API Documents Build Docs Run Document Site Locally Go Build Go Projects Run Go Protobuf Server Run Go Protobuf Client Java Build Java Projects Run Java Protobuf Server Run Java Protobuf Client Command Line Well know Targets # Build All bazel build //... # Test All bazel test //... API (Protocol Buffer Targets) # Build APIs bazel build //api Documentation Site # Build Docs bazel build //docs # Serve Docs Locally bazel run //docs:serve Go Project: Server \u0026amp; Client # Build Go Projects bazel build //golang/... # Run Go Protobuf Server bazel run //golang/example/server # Run Go Protobuf Client bazel run //golang/example/client Java Project: Server \u0026amp; Client # Build Java Projects bazel build //java/... # Run Java Protobuf Server bazel run //java/example/server # Run Java Protobuf Client bazel run //java/example/client "},{"id":6,"href":"/vscode-bazel-tutorial/tags/","title":"Tags","parent":"Visual Studio Code - Bazel Workspace","content":""},{"id":7,"href":"/vscode-bazel-tutorial/","title":"Visual Studio Code - Bazel Workspace","parent":"","content":" TL;DR; This repository contains an example project that uses Protocol Buffers (protobuf) to create a domain model and services. There are two example implementations, one in Go, the other in Java. The functionality is stubbed out, but shows how to build a multiple language project using Bazel. Lastly, it ties it all together with a predefined workspace and task to make it repeatable.\nArchitecture View What this IS NOT This repository IS NOT a general purpose tutorial for how to use Bazel, Visual Studio Code, Java, or Go. It is intended for those who want their IDE to work with a mono-repo / multi-project build system. That being said, I\u0026rsquo;ve attempted to add a README in each module to explain how it was built.\nPrerequisites Visual Studio Code (vscode) - Download and Install Bazel - Install Instructions Knowledge of your Terminal / Command Prompt Once Bazel is installed, make sure you can execute bazel help from the terminal.\nVerified :white_check_mark: Mac OS X :white_check_mark: Windows 10 with Windows Subsystem for Linux (WSL) :white_check_mark: Chrome OS (Version 105+) with Developer Linux Tools :x: Windows 10 Native - Not working due to path requirements. Setup In your home directory, create a folder called \u0026ldquo;projects\u0026rdquo;. This only matters due to some limitations in the workspace configuration file. Vscode extensions for Java and Go WILL NOT support variable expressions for paths.\nSteps # Create a projects directory, this example creates it on the /opt file system # This IS NOT recommended, but is done so for the sake of a conistant development environment. # Please feel free to put this any path you have access, but you need to remember for a couple of changes. sudo mkdir /opt/projects cd /opt/projects # Clone the repository git clone https://github.com/rrmcguinness/vscode-bazel-tutorial # Run Bazel once before starting bazel build //... # Open Visual Studio Code # If you changed the download location: code . # If you didn\u0026#39;t change the download location: code vscode-bazel-tutorial.code-workspace Edit the workspace (IF YOU CHANGED THE DOWNLOAD LOCATION) Once Visual Studio Code has opened, edit the vscode-bazel-tutorial.code-workspace file.\nChange all occurances of \u0026ldquo;/opt/projects\u0026rdquo; to your download directoy. DO NOT attempt to use variable, they ARE NOT honored by the extensions.\nLastly, in the java.configuration.runtimes, if you ARE NOT using Apple OS X, then please change _macos with _linux or _windows accordingly.\nAgain, this is because a relative path, and command variable expansion IS NOT supported by the workpace file. Otherwise ${command:os_type} would work.\nOnce that change has been made, you may either \u0026ldquo;open workspace from file\u0026rdquo;, or close and reopen from the terminal with the last command above.\nStart the Java Workspace Navigate to java \u0026gt; src \u0026gt; service \u0026gt; CustomerService.java and open it.\nWhen you open this file, it will start the Java Language Server, this will in-turn read the workspace file to determine where to find Java, and which dependencies to add to the classpath. ** More about that below.\nWhat happend When you ran bazel build //..., bazel read the .bazelrc file in this directory. .bazelrc instructed bazel to download all of the dependencies to the build directory under projects. The dependency cache is placed here so we can reference our GoLang, Java, Protobuf, and Downloaded dependencies using relative paths. Bazel then reads the WORKSPACE, and each recursive BUILD file to create a set of dependencies, this includes all of the binaries for Java, Go, etc. You either had the right directory, or you made some changes and edited the workspace. This is how the Java and Go environments are setup, so it\u0026rsquo;s pretty important. Again, with the workspace limitations, Java Projects MAY NOT have multiple Java dependencies, this ONLY impacts the IDEs ability to do auto complete, but DOES NOT represent the compile or runtime dependencies. This MAY cause problems. Understanding the Layout api - This is where the protocol buffer files are located. conf - These are configuration files used by Bazel. docs - a Hugo website (WIP). golang - The Go Project implementing the generated APIs. java - The Java Project implementing the generated APIS. third_party - A best practice directory for storing third_party assets. tools - Helper scripts for VSCode to utilize Go with Bazel. Important Files vscode-bazel-tutorial.code-workspace - responsible for configuring vscode. WORKSPACE - responsible for dependency management in Bazel. api/BUILD - the build file for the API model and GRPC. golang/BUILD - the Go build file with dependencies on the API. java/BUILD - the Java build file with dependencies on the API. Build Details Just so you know what\u0026rsquo;s happening behind the scenes when we execute bazel build //.... From above, we have a rough understanding, this section will provide a little more detail, starting from the WORKSPACE.\nAs bazel reads the workspace, it determines which languages and features will be supported. From top to bottom: Protocol Buffers The Protol Buffer Tool Chain (Protoc) GRPC GRPC Documentation Generator Go Toolchain (version 1.19.1) Gazelle (A build and dependency helper for bazel) Go GRPC rules. The Java Tool Chain (Java 17) The internal Maven Tool Chain The project Maven Dependencies Hugo Site Generation Tools A Hug Theme (GeekDoc) Onces those tool chains have been loaded, each directory BUILD file is read, and a dependency graph is created. That dependency graph determines the build order. API - Is built first because Java and Go depend on it, it uses the GRPC toolchain. Java - Is built, using the Java Toolchain, maven dependencies, and the protocol definitions. The output of the generated files are in the \u0026lsquo;build\u0026rsquo; directory. Go - Is built, using the Go Tool Chain, and the dependencies from the Gazelle (go_deps.bzl) file. The docs directory is built using the Hugo toolchain and theme. "},{"id":8,"href":"/vscode-bazel-tutorial/setup/wsl/","title":"Windows Subsystem for Linux","parent":"Setting up the Workspace","content":" Page Banner Introduction If you\u0026rsquo;re on a Windows workstation and want to use Bazel, the best option I\u0026rsquo;ve found is using Windows Subsystem for Linux or WSL.\nThe benefit of using WSL is the awesome native integration with Visual Studio Code. You can launch your project in WSL and simply use the VS Code you\u0026rsquo;ve already installed. As a developer, I\u0026rsquo;ve been using these features for years and sincerely appreciate Microsoft embracing WSL as an alternative development environment.\nInstallation Follow the directions found here.\nUsing VSCode with WSL Learning how to use VSCode with WSL can be found here\n"}]