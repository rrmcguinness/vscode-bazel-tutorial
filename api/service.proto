/* Copyright 2022 Ryan McGuinness
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 syntax = "proto3";

 package example.service;

 /*
 * Go Lang Options
 */
option go_package = "example/service";

/*
 * Java Options
 */
option java_package = "example.service";
option java_multiple_files = true;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

import "api/model.proto";





service Store {
    rpc List(google.protobuf.Empty)
        returns (stream example.model.Store) {}

    rpc Create(example.model.Store)
        returns (example.model.Store) {}

    rpc Update(example.model.Store) returns (example.model.Store) {}

    rpc Delete(IdRequest) returns (SimpleResponse) {}
}

service Customer {
    rpc Find(CustomerSearch)
        returns (stream example.model.Customer) {}

    rpc Create(example.model.Customer)
        returns (example.model.Customer) {}

    rpc Update(example.model.Customer)
        returns (example.model.Customer) {}

    rpc Delete(IdRequest)
        returns (SimpleResponse) {}
}

service Item {
    rpc Find(ItemSearch)
        returns (stream example.model.Item) {}

    rpc Get(IdRequest)
        returns (example.model.Item) {}

    rpc Create(example.model.Item)
        returns (example.model.Item) {}

    rpc Update(example.model.Item)
        returns (example.model.Item) {}

    rpc Delete(IdRequest)
        returns (SimpleResponse) {}

    rpc Restore(IdRequest)
        returns (SimpleResponse) {}
}

message TransactionRequest {
    string transactionId = 1;
}

message TransactionResponse {
    string transactionId = 1;
    example.model.Transaction state = 2;
}

message TransactionCustomerRequest {
    string transactionId = 1;
    example.model.Customer customer = 2;
}

message TransactionItemRequest {
    string transactionId = 1;
    example.model.LineItem line_item = 2;
}

service Transaction {

    rpc Create(example.model.Store)
        returns(TransactionResponse) {}

    rpc AddCustomer(TransactionCustomerRequest)
        returns (TransactionResponse) {}

    rpc AddItem(TransactionItemRequest)
        returns (TransactionResponse) {}

    rpc RemoveItem(TransactionItemRequest)
        returns (TransactionResponse) {}

    rpc PrepareForTender(TransactionRequest)
        returns (TransactionResponse) {};

        // Add many more functions here :D
}
